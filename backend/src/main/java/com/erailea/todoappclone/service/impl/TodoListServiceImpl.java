package com.erailea.todoappclone.service.impl;

import com.erailea.todoappclone.dto.response.TodoListResponse;
import com.erailea.todoappclone.exception.ResourceNotFoundException;
import com.erailea.todoappclone.mapper.TodoListMapper;
import com.erailea.todoappclone.model.Note;
import com.erailea.todoappclone.model.TodoList;
import com.erailea.todoappclone.repository.NoteRepository;
import com.erailea.todoappclone.repository.TodoListRepository;
import com.erailea.todoappclone.service.TodoListService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class TodoListServiceImpl implements TodoListService {
    private final TodoListRepository todoListRepository;
    private final NoteRepository noteRepository;
    private final TodoListMapper todoListMapper;

    @Override
    public TodoList createList(String title, String userId) {
        TodoList list = new TodoList(
                null, // ID will be generated by Couchbase
                title,
                LocalDateTime.now(),
                userId,
                null // deletedAt is null for new lists
        );
        list.setDeletedAt(null);
        return todoListRepository.save(list);
    }

    @Override
    public List<TodoListResponse> getLists(String userId) {
        // Fetch all todo lists (1 query)
        List<TodoList> todoLists = todoListRepository.findAllByUserIdAndDeletedAtIsNullOrderByCreatedAtDesc(userId);

        if (todoLists.isEmpty()) {
            return Collections.emptyList();
        }

        // Extract all list IDs
        List<String> listIds = todoLists.stream()
                .map(TodoList::getId)
                .collect(Collectors.toList());

        // Fetch all notes for all lists in a single query (1 query)
        List<Note> allNotes = noteRepository.findAllByListIdInAndDeletedAtIsNull(listIds);

        // Group notes by listId ordered by dueDate
        Map<String, List<Note>> notesByListId = allNotes.stream()
                .collect(Collectors.groupingBy(Note::getListId));

        // Map to response DTOs
        return todoLists.stream().map(todoList -> {
            List<Note> notes = notesByListId.getOrDefault(todoList.getId(), Collections.emptyList());

            // Sort notes by dueDate (null values last) and then by createdAt
            List<Note> sortedNotes = notes.stream()
                    .sorted(Comparator
                            .<Note, LocalDateTime>comparing(Note::getDueDate, Comparator.nullsLast(Comparator.naturalOrder()))
                            .thenComparing(Note::getCreatedAt))
                    .collect(Collectors.toList());

            return todoListMapper.toResponse(todoList, sortedNotes);
        }).collect(Collectors.toList());
    }

    @Override
    public TodoList updateListTitle(String id, String title, String userId) {
        if (todoListRepository.countByIdAndUserIdAndNotDeleted(id, userId) == 0) {
            throw new ResourceNotFoundException("TodoList", "id", id);
        }

        TodoList list = todoListRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("TodoList", "id", id));

        list.setTitle(title);
        return todoListRepository.save(list);
    }

    @Override
    public void deleteList(String id, String userId) {
        if (todoListRepository.countByIdAndUserIdAndNotDeleted(id, userId) == 0) {
            throw new ResourceNotFoundException("TodoList", "id", id);
        }

        TodoList list = todoListRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("TodoList", "id", id));

        list.setDeletedAt(LocalDateTime.now());
        todoListRepository.save(list);

        // Soft delete all notes in the list
        List<Note> notes = noteRepository.findAllByListIdAndDeletedAtIsNull(id);
        for (Note note : notes) {
            note.setDeletedAt(LocalDateTime.now());
        }
        noteRepository.saveAll(notes);
    }
} 