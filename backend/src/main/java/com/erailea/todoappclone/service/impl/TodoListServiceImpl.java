package com.erailea.todoappclone.service.impl;

import com.erailea.todoappclone.exception.ResourceNotFoundException;
import com.erailea.todoappclone.model.Note;
import com.erailea.todoappclone.model.TodoList;
import com.erailea.todoappclone.repository.TodoListRepository;
import com.erailea.todoappclone.repository.NoteRepository;
import com.erailea.todoappclone.service.TodoListService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
public class TodoListServiceImpl implements TodoListService {
    private final TodoListRepository todoListRepository;
    private final NoteRepository noteRepository;

    @Override
    public TodoList createList(String title, String userId) {
        TodoList list = new TodoList(
                null, // ID will be generated by Couchbase
                title,
                LocalDateTime.now(),
                userId,
                null // deletedAt is null for new lists
        );
        list.setDeletedAt(null);
        return todoListRepository.save(list);
    }

    @Override
    public List<TodoList> getLists(String userId) {
        return todoListRepository.findAllByUserIdAndDeletedAtIsNull(userId);
    }

    @Override
    public TodoList updateListTitle(String id, String title, String userId) {
        if (todoListRepository.countByIdAndUserIdAndNotDeleted(id, userId) == 0) {
            throw new ResourceNotFoundException("TodoList", "id", id);
        }

        TodoList list = todoListRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("TodoList", "id", id));

        list.setTitle(title);
        return todoListRepository.save(list);
    }

    @Override
    public void deleteList(String id, String userId) {
        if (todoListRepository.countByIdAndUserIdAndNotDeleted(id, userId) == 0) {
            throw new ResourceNotFoundException("TodoList", "id", id);
        }

        TodoList list = todoListRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("TodoList", "id", id));

        list.setDeletedAt(LocalDateTime.now());
        todoListRepository.save(list);

        // Soft delete all notes in the list
        List<Note> notes = noteRepository.findAllByListIdAndDeletedAtIsNull(id);
        for (Note note : notes) {
            note.setDeletedAt(LocalDateTime.now());
        }
        noteRepository.saveAll(notes);
    }
} 