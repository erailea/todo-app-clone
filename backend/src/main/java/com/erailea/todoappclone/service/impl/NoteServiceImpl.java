package com.erailea.todoappclone.service.impl;

import com.erailea.todoappclone.model.Note;
import com.erailea.todoappclone.repository.NoteRepository;
import com.erailea.todoappclone.repository.TodoListRepository;
import com.erailea.todoappclone.service.NoteService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
public class NoteServiceImpl implements NoteService {
    private final NoteRepository noteRepository;
    private final TodoListRepository todoListRepository;

    @Override
    public Note createNote(String content, String listId, LocalDateTime dueDate, String userId) {
        // Verify list exists and belongs to user
        if (todoListRepository.countByIdAndUserIdAndNotDeleted(listId, userId) == 0) {
            throw new RuntimeException("List not found");
        }

        Note note = new Note(
                null, // ID will be generated by Couchbase
                content,
                false,
                LocalDateTime.now(),
                dueDate,
                listId,
                null // deletedAt is null for new notes
        );
        return noteRepository.save(note);
    }

    @Override
    public List<Note> getNotesByListId(String listId, String userId) {
        // Verify list exists and belongs to user
        if (todoListRepository.countByIdAndUserIdAndNotDeleted(listId, userId) == 0) {
            throw new RuntimeException("List not found");
        }

        return noteRepository.findAllByListIdAndDeletedAtIsNull(listId);
    }

    @Override
    public Note getNoteById(String id, String userId) {
        Note note = noteRepository.findByIdAndDeletedAtIsNull(id)
                .orElseThrow(() -> new RuntimeException("Note not found"));

        // Verify list exists and belongs to user
        if (todoListRepository.countByIdAndUserIdAndNotDeleted(note.getListId(), userId) == 0) {
            throw new RuntimeException("List not found");
        }

        return note;
    }

    @Override
    public Note updateNote(String id, String content, Boolean done, LocalDateTime dueDate, String targetListId, String userId) {
        Note note = noteRepository.findByIdAndDeletedAtIsNull(id)
                .orElseThrow(() -> new RuntimeException("Note not found"));

        // Verify current list exists and belongs to user
        if (todoListRepository.countByIdAndUserIdAndNotDeleted(note.getListId(), userId) == 0) {
            throw new RuntimeException("List not found");
        }

        if (content != null) {
            note.setContent(content);
        }
        if (done != null) {
            note.setDone(done);
        }
        if (dueDate != null) {
            note.setDueDate(dueDate);
        }
        if (targetListId != null) {
            // Verify new list exists and belongs to user
            if (todoListRepository.countByIdAndUserIdAndNotDeleted(targetListId, userId) == 0) {
                throw new RuntimeException("List not found");
            }

            note.setListId(targetListId);
        }

        return noteRepository.save(note);
    }

    @Override
    public void deleteNote(String id, String userId) {
        Note note = noteRepository.findByIdAndDeletedAtIsNull(id)
                .orElseThrow(() -> new RuntimeException("Note not found"));

        // Verify list exists and belongs to user
        if (todoListRepository.countByIdAndUserIdAndNotDeleted(note.getListId(), userId) == 0) {
            throw new RuntimeException("List not found");
        }

        note.setDeletedAt(LocalDateTime.now());
        noteRepository.save(note);
    }
} 